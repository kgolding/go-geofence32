package geofence

import (
	"math/rand"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCorrectness(t *testing.T) {
	polygon := randomPolygon(2000, 0.1)
	geoPoly := NewPolygon(polygon)
	geofence := NewGeofence(polygon, int32(20))

	for i := 0; i < 100000; i++ {
		point := randomPoint(200)
		assert.Equal(t, geofence.Inside(point), geoPoly.Contains(point))
	}
}

/*===================================================
Benchmark Result 1st version:
BenchmarkGeofence	10000000	       109 ns/op
BenchmarkGeoContains	 3000000	       475 ns/op
====================================================*/
func BenchmarkGeofence(b *testing.B) {
	// Chicago geofence
	polygon := []Point{
		NewPoint(42.01313565896657, -87.89133314508945),
		NewPoint(42.01086525470408, -87.94498134870082),
		NewPoint(41.955566495567936, -87.94566393946297),
		NewPoint(41.937218295745865, -87.88581848144531),
		NewPoint(41.96295962052549, -87.86811594385654),
		NewPoint(41.93385557339662, -87.86333084106445),
		NewPoint(41.934494079111666, -87.81011581420898),
		NewPoint(41.90554916282452, -87.80925750732422),
		NewPoint(41.9058827519221, -87.77938842773438),
		NewPoint(41.86402837073972, -87.77792931126896),
		NewPoint(41.864284053216565, -87.75638580846135),
		NewPoint(41.82348977579423, -87.75552751729265),
		NewPoint(41.823042045417644, -87.80410768697038),
		NewPoint(41.771468158020106, -87.80324938008562),
		NewPoint(41.772364335324305, -87.74625778198242),
		NewPoint(41.730894639311565, -87.74513235432096),
		NewPoint(41.73166805909664, -87.6870346069336),
		NewPoint(41.71748939617332, -87.68600471266836),
		NewPoint(41.716966221614854, -87.7243280201219),
		NewPoint(41.69405798811367, -87.72351264953613),
		NewPoint(41.693865716655395, -87.74385454365984),
		NewPoint(41.67463566843159, -87.74299623677507),
		NewPoint(41.67550471265456, -87.6654052734375),
		NewPoint(41.651683859743336, -87.66489028930664),
		NewPoint(41.65181212480582, -87.64789581298828),
		NewPoint(41.652036588050684, -87.62532234191895),
		NewPoint(41.643100214173714, -87.62506484985352),
		NewPoint(41.643492184875946, -87.51889228820801),
		NewPoint(41.642929165686375, -87.38588330335915),
		NewPoint(41.836600482955916, -87.43858338799328),
		NewPoint(42.05042567111704, -87.40253437310457),
		NewPoint(42.070116505457364, -87.47205723077059),
		NewPoint(42.0681413002819, -87.66792302951217),
		NewPoint(42.02862488227374, -87.66551960259676),
		NewPoint(42.0280511074349, -87.71289814263582),
		NewPoint(41.998468275360544, -87.71301263943315),
		NewPoint(41.9988509912138, -87.75069231167436),
		NewPoint(42.02100207763309, -87.77704238542356),
		NewPoint(42.02010937741473, -87.831029893714),
		NewPoint(41.98719839843826, -87.83120155116194),
		NewPoint(41.9948536336077, -87.86373138340423),
	}

	geofence := NewGeofence(polygon)
	for i := 0; i < b.N; i++ {
		point := randomPointCustom(geofence.minX, geofence.maxX, geofence.minY, geofence.maxY, 100)
		geofence.Inside(point)
	}
}

func BenchmarkGeoContains(b *testing.B) {
	// Chicago geofence
	polygon := []Point{
		NewPoint(42.01313565896657, -87.89133314508945),
		NewPoint(42.01086525470408, -87.94498134870082),
		NewPoint(41.955566495567936, -87.94566393946297),
		NewPoint(41.937218295745865, -87.88581848144531),
		NewPoint(41.96295962052549, -87.86811594385654),
		NewPoint(41.93385557339662, -87.86333084106445),
		NewPoint(41.934494079111666, -87.81011581420898),
		NewPoint(41.90554916282452, -87.80925750732422),
		NewPoint(41.9058827519221, -87.77938842773438),
		NewPoint(41.86402837073972, -87.77792931126896),
		NewPoint(41.864284053216565, -87.75638580846135),
		NewPoint(41.82348977579423, -87.75552751729265),
		NewPoint(41.823042045417644, -87.80410768697038),
		NewPoint(41.771468158020106, -87.80324938008562),
		NewPoint(41.772364335324305, -87.74625778198242),
		NewPoint(41.730894639311565, -87.74513235432096),
		NewPoint(41.73166805909664, -87.6870346069336),
		NewPoint(41.71748939617332, -87.68600471266836),
		NewPoint(41.716966221614854, -87.7243280201219),
		NewPoint(41.69405798811367, -87.72351264953613),
		NewPoint(41.693865716655395, -87.74385454365984),
		NewPoint(41.67463566843159, -87.74299623677507),
		NewPoint(41.67550471265456, -87.6654052734375),
		NewPoint(41.651683859743336, -87.66489028930664),
		NewPoint(41.65181212480582, -87.64789581298828),
		NewPoint(41.652036588050684, -87.62532234191895),
		NewPoint(41.643100214173714, -87.62506484985352),
		NewPoint(41.643492184875946, -87.51889228820801),
		NewPoint(41.642929165686375, -87.38588330335915),
		NewPoint(41.836600482955916, -87.43858338799328),
		NewPoint(42.05042567111704, -87.40253437310457),
		NewPoint(42.070116505457364, -87.47205723077059),
		NewPoint(42.0681413002819, -87.66792302951217),
		NewPoint(42.02862488227374, -87.66551960259676),
		NewPoint(42.0280511074349, -87.71289814263582),
		NewPoint(41.998468275360544, -87.71301263943315),
		NewPoint(41.9988509912138, -87.75069231167436),
		NewPoint(42.02100207763309, -87.77704238542356),
		NewPoint(42.02010937741473, -87.831029893714),
		NewPoint(41.98719839843826, -87.83120155116194),
		NewPoint(41.9948536336077, -87.86373138340423),
	}

	golangGeo := NewPolygon(polygon)
	for i := 0; i < b.N; i++ {
		point := randomPointCustom(41.642929165686375, 42.070116505457364, -87.94566393946297, -87.38588330335915, 100)
		golangGeo.Contains(point)
	}
}

func randomPoint(length float32) Point {
	return NewPoint(rand.Float32()*length-length/2, rand.Float32()*length-length/2)
}

func randomPolygon(length float32, percentageOfLength float32) []Point {
	polygon := make([]Point, 1000)
	for i := 0; i < 1000; i++ {
		polygon[i] = randomPoint(length * percentageOfLength)
	}
	return polygon
}

func randomPointCustom(minLat float32, maxLat float32, minLng float32, maxLng float32, factor float32) Point {
	latRange := maxLat - minLat
	lngRange := maxLng - minLng
	return NewPoint((minLat+maxLat)/2-latRange*factor/2+latRange*factor*rand.Float32(), (minLng+maxLng)/2-lngRange*factor/2+lngRange*factor*rand.Float32())
}
